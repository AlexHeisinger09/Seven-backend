server:
  port: ${SERVER_PORT:8081}
  servlet:
    context-path: /api/v1
  error:
    include-message: always
    include-binding-errors: always

spring:
  application:
    name: backend-api
  
  datasource:
    url: jdbc:postgresql://${DB_HOST:172.16.0.36}:${DB_PORT:5432}/${DB_NAME:seven}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:C4ronte65$}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: ${DB_POOL_SIZE:10}
      minimum-idle: ${DB_MIN_IDLE:5}
      idle-timeout: ${DB_IDLE_TIMEOUT:300000}
      max-lifetime: ${DB_MAX_LIFETIME:1800000}
      connection-test-query: SELECT 1
  
  jpa:
    hibernate:
      ddl-auto: none
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
        implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
    show-sql: ${SHOW_SQL:false}
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        default_schema: ${DB_SCHEMA:web_eventuales}
        jdbc:
          time_zone: America/Santiago
    open-in-view: false

  jackson:
    property-naming-strategy: LOWER_CAMEL_CASE
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: America/Santiago
    serialization:
      write-dates-as-timestamps: false
      fail-on-empty-beans: false
      write-date-timestamps-as-nanoseconds: false
    deserialization:
      fail-on-unknown-properties: false
    mapper:
      default-view-inclusion: true

  security:
    user:
      name: ${SECURITY_USER:admin}
      password: ${SECURITY_PASSWORD:admin}

  web:
    cors:
      allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:5173}
      allowed-methods: ${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS}
      allowed-headers: ${CORS_ALLOWED_HEADERS:*}
      allow-credentials: true
    
# JWT Configuration
app:
  jwt:
    secret: ${JWT_SECRET:miClaveSecretaSuperSeguraParaJWT2024ChangeMeInProduction123456}
    expiration: ${JWT_EXPIRATION:86400000}
    refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000}

# Configuración de la aplicación
application:
  name: Muelles de Penco - Backend API
  version: @project.version@
  description: Backend API para sistema de gestión de RRHH

# Configuración de actuator (para monitoreo)
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
      base-path: /actuator
  endpoint:
    health:
      show-details: ${ACTUATOR_HEALTH_DETAILS:when-authorized}

# Logging configuration
logging:
  level:
    com.muellespenco: ${LOG_LEVEL:INFO}
    org.springframework.security: ${SECURITY_LOG_LEVEL:WARN}
    org.springframework.web: ${WEB_LOG_LEVEL:WARN}
    org.hibernate.SQL: ${SQL_LOG_LEVEL:WARN}
    org.hibernate.type.descriptor.sql.BasicBinder: ${SQL_PARAMS_LOG_LEVEL:WARN}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: ${LOG_FILE:logs/backend-api.log}

# Configuraciones de cache (si decides usarlo más adelante)
cache:
  enabled: ${CACHE_ENABLED:false}
  time-to-live: ${CACHE_TTL:3600}

# Configuración para desarrollo/producción
profiles:
  active: ${SPRING_PROFILES_ACTIVE:development}

# OpenAPI/Swagger Configuration
springdoc:
  api-docs:
    enabled: true
  swagger-ui:
    enabled: true